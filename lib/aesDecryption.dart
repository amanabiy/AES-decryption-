import 'dart:typed_data';
import 'dart:convert';

import 'package:convert/convert.dart';

const sBox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

const invSBox = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

const rCon = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
];

class AES {
  static final roundsBykeySize = {16: 10, 24: 12, 32: 14};

  late int nRounds;
  late List<List<List<int>>> keyMatrices;

  AES(Uint8List masterKey) {
    assert(roundsBykeySize.containsKey(masterKey.length));
    nRounds = roundsBykeySize[masterKey.length]!;
    keyMatrices = _expandKey(masterKey);
  }

List<List<List<int>>> _expandKey(Uint8List masterKey) {
  List<List<int>> keyColumns = bytes2Matrix(masterKey);
  int iterationSize = masterKey.length ~/ 4;

  int i = 1;
  while (keyColumns.length < (nRounds + 1) * 4) {
    List<int> word = List<int>.from(keyColumns.last);

    if (keyColumns.length % iterationSize == 0) {
      word.add(word.removeAt(0));
      word = word.map((b) => sBox[b]).toList();
      word[0] ^= rCon[i];
      i += 1;
    } else if (masterKey.length == 32 && keyColumns.length % iterationSize == 4) {
      word = word.map((b) => sBox[b]).toList();
    }

    word = xorBytes(Uint8List.fromList(word), Uint8List.fromList(keyColumns[keyColumns.length - iterationSize]));
    keyColumns.add(word);
  }

  return List.generate(keyColumns.length ~/ 4, (i) {
    return keyColumns.sublist(i * 4, (i + 1) * 4);
  });
}


  Uint8List decryptBlock(Uint8List ciphertext) {
    assert(ciphertext.length == 16);

    List<List<int>> cipherState = bytes2Matrix(ciphertext);

    addRoundKey(cipherState, keyMatrices.last);
    invShiftRows(cipherState);
    invSubBytes(cipherState);

    for (int i = nRounds - 1; i > 0; i--) {
      addRoundKey(cipherState, keyMatrices[i]);
      invMixColumns(cipherState);
      invShiftRows(cipherState);
      invSubBytes(cipherState);
    }

    addRoundKey(cipherState, keyMatrices[0]);

    return matrix2Bytes(cipherState);
  }

  Uint8List decryptCBC(Uint8List ciphertext, Uint8List iv) {
    assert(iv.length == 16);
    List<Uint8List> blocks = [];
    Uint8List previous = Uint8List.fromList(iv);
    for (int i = 0; i < ciphertext.length; i += 16) {
      Uint8List ciphertextBlock = Uint8List.sublistView(ciphertext, i, i + 16);
      blocks.add(xorBytes(previous, decryptBlock(ciphertextBlock)));
      previous = Uint8List.fromList(ciphertextBlock);
    }
    return unpad(Uint8List.fromList(blocks.expand((block) => block).toList()));
  }

  void invSubBytes(List<List<int>> s) {
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        s[i][j] = invSBox[s[i][j]];
      }
    }
  }

  Uint8List decryptEBC(Uint8List ciphertext) {
    List<Uint8List> blocks = [];
    for (int i = 0; i < ciphertext.length; i += 16) {
      Uint8List ciphertextBlock = Uint8List.sublistView(ciphertext, i, i + 16);
      blocks.add(decryptBlock(ciphertextBlock));
    }
    return unpad(Uint8List.fromList(blocks.expand((block) => block).toList()));
  }

  void invShiftRows(List<List<int>> s) {
    int temp;

    temp = s[3][1];
    s[3][1] = s[2][1];
    s[2][1] = s[1][1];
    s[1][1] = s[0][1];
    s[0][1] = temp;

    temp = s[0][2];
    s[0][2] = s[2][2];
    s[2][2] = temp;
    temp = s[1][2];
    s[1][2] = s[3][2];
    s[3][2] = temp;

    temp = s[0][3];
    s[0][3] = s[1][3];
    s[1][3] = s[2][3];
    s[2][3] = s[3][3];
    s[3][3] = temp;
  }


  void addRoundKey(List<List<int>> s, List<List<int>> k) {
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        s[i][j] ^= k[i][j];
      }
    }
  }

  void mixSingleColumn(List<int> a) {
    int t = a[0] ^ a[1] ^ a[2] ^ a[3];
    int u = a[0];
    a[0] ^= t ^ xtime(a[0] ^ a[1]);
    a[1] ^= t ^ xtime(a[1] ^ a[2]);
    a[2] ^= t ^ xtime(a[2] ^ a[3]);
    a[3] ^= t ^ xtime(a[3] ^ u);
  }

  void invMixColumns(List<List<int>> s) {
    for (int i = 0; i < 4; i++) {
      int u = xtime(xtime(s[i][0] ^ s[i][2]));
      int v = xtime(xtime(s[i][1] ^ s[i][3]));
      s[i][0] ^= u;
      s[i][1] ^= v;
      s[i][2] ^= u;
      s[i][3] ^= v;
    }
    mixColumns(s);
  }

  List<List<int>> bytes2Matrix(Uint8List text) {
    return [
      for (int i = 0; i < text.length; i += 4)
        text.sublist(i, i + 4).toList(),
    ];
  }

  Uint8List matrix2Bytes(List<List<int>> matrix) {
    return Uint8List.fromList(matrix.expand((row) => row).toList());
  }

  Uint8List xorBytes(Uint8List a, Uint8List b) {
    return Uint8List.fromList(List.generate(a.length, (i) => a[i] ^ b[i]));
  }

  Uint8List unpad(Uint8List plaintext) {
    int paddingLen = plaintext.last;
    assert(paddingLen > 0);
    List<int> message = plaintext.sublist(0, plaintext.length - paddingLen);
    List<int> padding = plaintext.sublist(plaintext.length - paddingLen);
    assert(padding.every((p) => p == paddingLen));
    return Uint8List.fromList(message);
  }
  
  void mixColumns(List<List<int>> s) {
    for (int i = 0; i < 4; i++) {
      mixSingleColumn(s[i]);
    }
  }
  
  int xtime(int i) {
    return ((i << 1) ^ (0x1B & - (i >> 7))) & 0xFF;
  }
}


// used for Testing the AES Decrypter
// void main() {
//   String plaintextHexECB = "200c83cfd2bbeb9765c5ffe322be35bf";
//   String plaintextHexCBC = "1bc84b687d09b90cf978d6987f1f7f54";

//   Uint8List plaintextBytesECB = Uint8List.fromList(hex.decode(plaintextHexECB));
//   Uint8List plaintextBytesCBC = Uint8List.fromList(hex.decode(plaintextHexCBC));

//   String keyString = "asdfasdfasdfasdf";
//   Uint8List keyBytes = Uint8List.fromList(utf8.encode(keyString));

//   AES aes = AES(keyBytes);
//   Uint8List encryptedText = Uint8List.fromList(plaintextBytesECB);
//   Uint8List encryptedTextCBC = Uint8List.fromList(plaintextBytesCBC);
//   Uint8List iv = Uint8List.fromList((utf8.encode(keyString)));

//   Uint8List decryptedText = aes.decryptEBC(encryptedText);
//   Uint8List decryptedTextCBC = aes.decryptCBC(encryptedTextCBC, iv);


//   print("\n\n\nEncrypted Text Hex ECB: $plaintextHexECB");
//   print("keyString: $keyString");
//   print("Decrypted Text ECB: ${utf8.decode(decryptedText)}");

//   print("\n\n\nEncrypted Text Hex CBC: $plaintextHexCBC");
//   print("keyString: $keyString");
//   print("Decrypted Text CBC: ${utf8.decode(decryptedTextCBC)}");
// }
